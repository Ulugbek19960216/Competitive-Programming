//https://leetcode.com/problems/first-bad-version/?envType=study-plan&id=algorithm-i
/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        if(n === 1 && isBadVersion(n)) return n
        let left = 1
        let right = n;
        let ans;
        let mid;

     while(left <= right) {
           mid = Math.floor(left + (right - left) / 2);
        if(isBadVersion(mid)) {
             ans = mid;
             right = mid - 1;
        } else {
            left = mid + 1
        }
     }
     return ans
    }
};
